import os
import asyncio
import logging
import sys

from aiogram import types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram import Bot, Dispatcher, html
from aiogram.types.message import Message
from aiogram.filters.command import Command
from aiogram.client.default import DefaultBotProperties

from utils_demo import demo
from utils_base import process_message
from utils_keyboard import keyboard_help, keyboard_start
from dotenv import load_dotenv
load_dotenv()
dp = Dispatcher()
TOKEN = os.getenv('TELEGRAM_TOKEN')

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π
@dp.message(CommandStart())
async def command_start_handler(message: Message, bot: Bot) -> None:
    await message.answer_sticker('CAACAgIAAxkBAAIBwWY8iur1NohWGW1_lKvUC94E2PSwAAJuAAPb234AAUaeZ3EyOf6TNQQ')
    await message.answer(text=f"<b>–ü–†–ò–í–ï–¢ {message.from_user.full_name.upper()}, –≠–¢–û REMINDER_BOT</b>\n–Ø –ø–æ–º–æ–≥—É –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –∏ —Å–æ–æ–±—â—É –µ—Å–ª–∏ –æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ–∂–¥—å üå®üå®üå® ",
                         reply_markup=keyboard_start,
                         parse_mode=ParseMode.HTML)
@dp.message(Command('help'))
async def help_handler(message: Message, bot: Bot) -> None:
    keyboard = keyboard_help
    await message.answer_sticker('CAACAgIAAxkBAAICxGY8nOuWnIRXGXdlHaNIEFqTpzaVAAI_AAPb234AAfTmnDgB5KppNQQ')
    await message.answer(
        text=f"<b>–≠—Ç–æ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è :</b>\n-    –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –µ–≥–æ –≤—Ä–µ–º—è\n-    –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ –¥–æ–∂–¥–µ –≤ —Ñ–æ—Ä–º–µ<b>: '–æ—Å–∞–¥–∫–∏ –ú–æ—Å–∫–≤–∞'</b> ",
        reply_markup=keyboard,
        parse_mode=ParseMode.HTML)

# –ö–Ω–æ–ø–∫–∞ 'info'
@dp.message(Command('info'))
async def info_handler(message: Message, bot: Bot) -> None:
    await message.answer_photo(types.FSInputFile(path='1.png'),
                               caption=f'{html.bold("GITHUB :")}\ngithub.com/AlexanderGithubProfile/WHATSAPP_BOT_REMINDER\n\n{html.bold("TELEGRAM :")}\n@weather_tool_bot \n(https://t.me/weather_tool_bot)')

# –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message()
async def echo_handler(message: Message) -> None:
    await process_message(message)

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "info"
@dp.callback_query(lambda query: query.data == 'info')
async def info_handler(query: types.CallbackQuery):
    await query.message.answer_photo(types.FSInputFile(path='1.png'),
                                     caption=f'{html.bold("GITHUB :")}\ngithub.com/AlexanderGithubProfile/WHATSAPP_BOT_REMINDER\n\n{html.bold("TELEGRAM :")}\n@weather_tool_bot \n(https://t.me/weather_tool_bot)')

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ "–ø—Ä–∏–º–µ—Ä –∫–æ–º–∞–Ω–¥"
@dp.callback_query(lambda query: query.data == 'command_example')
async def command_example_handler(query: types.CallbackQuery):
    await help_handler(query.message, query.bot)

# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö –∫–æ–º–∞–Ω–¥
@dp.callback_query(lambda query: query.data in ['reminder', 'precipitation'])
async def command_example_handler(query: types.CallbackQuery, bot: Bot):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –∏ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏—é
    a = 0 if query.data == 'reminder' else 1
    button_text = query.message.reply_markup.inline_keyboard[0][a].text.lstrip('–í—ã :')
    await demo(text=button_text,sender=query.from_user.id,
               message=query.message,full_name=query.from_user.full_name,
               bot=bot)

async def main() -> None:
    bot = Bot(token=TOKEN,
              default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot, skip_updates=True)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())