import os
import requests
import numpy as np
from datetime import timedelta
from datetime import datetime
from .twilio import send_reminders

# –ú–æ–¥—É–ª—å –ø—Ä–æ–≤–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è(–ù–ê–ß–ê–õ–û)
def check_precipitation(city_name):
    try:
        open_weather_token = os.getenv('OPEN_WEATHER_MAP_API')
        url = f"http://api.openweathermap.org/data/2.5/forecast?q={city_name}&units=metric&cnt=20&lang=ru&appid={open_weather_token}"
        response = requests.get(url)
        reminder_str_telegram, reminder_str_whatsapp, rain_probabilities = weather_data_extractor(response.json())
        return reminder_str_telegram, reminder_str_whatsapp, rain_probabilities
    except Exception as e:
        print(f'–û—à–∏–±–∫–∞: {e}')

# –ú–æ–¥—É–ª—å –ø—Ä–æ–≤–≤–µ—Ä–∫–∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—Å–∞–¥–∫–æ–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã—Ö –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è(–ü–†–û–î–û–õ–ñ–ï–ù–ò–ï)
def weather_data_extractor(data):
    # –î–µ–ª–∞–µ–º —Ñ–ª–∞–≥–∏ –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–º–µ–∂–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ø—Ä–æ–º–µ–∂—É—Ç–∫–æ–≤ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    rain_forecast = False       # –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–∂–¥—è
    rain_start_time = None      # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–∂–¥—è
    rain_end_time = None        # –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–∂–¥—è
    total_feels_like = 0        # –û–±—â–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–∂–¥—è
    rain_count = 0              # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –¥–æ–∂–¥—è
    rain_probabilities = []
    reminder_str_telegram = ''
    reminder_str_whatsapp = ''
    for i in data['list']:
        if i['pop'] * 100 > 50: # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è –±–æ–ª—å—à–µ 50% ?
            if not rain_forecast:
                # –ï—Å–ª–∏ –Ω–∞—á–∞–ª—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ–∂–¥—è
                rain_start_time = datetime.strptime(i['dt_txt'], '%Y-%m-%d %H:%M:%S')
                rain_forecast = True
                total_feels_like = i['main']['feels_like']
                rain_count = 1
                rain_probabilities = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–µ–π –¥–æ–∂–¥—è –≤ –∫–∞–∂–¥–æ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–º –ø—Ä–æ–º–µ–∂—É—Ç–∫–µ
            else:  # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–æ–∂–¥—è
                total_feels_like += i['main']['feels_like']
                rain_count += 1
            rain_probabilities.append((i['pop'] * 100, datetime.strptime(i['dt_txt'], '%Y-%m-%d %H:%M:%S')))
        else:  # –ï—Å–ª–∏ –¥–æ–∂–¥—å –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
            if rain_forecast:
                rain_end_time = datetime.strptime(i['dt_txt'], '%Y-%m-%d %H:%M:%S')
                average_feels_like = total_feels_like / rain_count
                average_probabilities = np.mean([x[0] for x in rain_probabilities])
                reminder_str_telegram = f"<b>‚ö†Ô∏èWarning <a href='http://t.me/weather_tool_bot'>–≥.{data['city']['name']}</a></b>\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {average_probabilities}% —Å {rain_start_time.strftime('%H:%M')} –¥–æ {rain_end_time.strftime('%H:%M')}, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n\n–ë—É–¥–µ—Ç {i['weather'][0]['description']}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {np.round(average_feels_like)}¬∞C:"
                reminder_str_whatsapp = f"\n*‚ö†Ô∏èWarning* *–≥.{data['city']['name']}*\n–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {np.round(average_probabilities,1)}% —Å *{rain_start_time.strftime('%H:%M')}* –¥–æ *{rain_end_time.strftime('%H:%M')}*, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –∑–æ–Ω—Ç, —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!\n\n–ë—É–¥–µ—Ç {i['weather'][0]['description']}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {np.round(average_feels_like)}¬∞C:"
                for prob, time in rain_probabilities:
                    reminder_str_telegram += f"<b>\n‚Ä¢   {time.strftime('%H:%M')}-{(time + timedelta(hours=3)).strftime('%H:%M')}</b> –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å : {np.round(prob, 1)}%"
                    reminder_str_whatsapp += f"\n‚Ä¢   *{time.strftime('%H:%M')}*-*{(time + timedelta(hours=3)).strftime('%H:%M')}* –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å : {np.round(prob, 1)}%"
                rain_forecast = False
    return reminder_str_telegram, reminder_str_whatsapp, rain_probabilities

def forecast_precipitation(city, user, number):
    url = f"http://api.openweathermap.org/data/2.5/forecast?q={city}&units=metric&cnt=56&lang=ru&appid={os.getenv('OPEN_WEATHER_MAP_API')}"
    response = requests.get(url).json()
    if response['cod'] == '404':
        return None
    _text = weather_forecast(response, user)
    send_reminders(f'{_text}', number)

def weather_forecast(response, user):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–æ–∂–¥—è –∏ –∏–∫–æ–Ω–æ–∫ –ø–æ–≥–æ–¥—ã –ø–æ –¥–Ω—è–º
    daily_data = {}
    header = f'*‚òÄÔ∏è{user}*<_@weather_tool_bot_>\n\n'
    weekday_names = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    # –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∑–Ω–∞—á–µ–Ω–∏–π 'icon' –∏ —Å–º–∞–π–ª–∏–∫–æ–≤
    weather_icons = {
        '01': '‚òÄÔ∏è',  # —è—Å–Ω–æ
        '02': 'üå§Ô∏è',  # –Ω–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å
        '03': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
        '04': '‚òÅÔ∏è',  # –æ–±–ª–∞—á–Ω–æ
        '09': 'üåßÔ∏è',  # –ª–µ–≥–∫–∏–π –¥–æ–∂–¥—å
        '10': 'üåßÔ∏è',  # –¥–æ–∂–¥—å
        '11': '‚õàÔ∏è',  # –≥—Ä–æ–∑–∞
        '13': '‚ùÑÔ∏è',  # —Å–Ω–µ–≥
        '50': 'üí®'  # —Ç—É–º–∞–Ω
    }

    # –ò—Ç–µ—Ä–∏—Ä—É–µ–º—Å—è –ø–æ —Å–ø–∏—Å–∫—É –ø–æ–≥–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    for data in response['list']:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∏–∑ –ø–æ–ª—è 'dt_txt' –∏ –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –≤ –æ–±—ä–µ–∫—Ç datetime
        date_ = datetime.strptime(data['dt_txt'], '%Y-%m-%d %H:%M:%S').date()
        time = datetime.strptime(data['dt_txt'], '%Y-%m-%d %H:%M:%S').time().hour

        temperature = data['main']['temp']
        rain_probability = data['pop']
        weather_icon = data['weather'][0]['icon'][:2]
        # –ò—Å–∫–ª—é—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –ø–æ—Å–ª–µ 23:00 –∏ –¥–æ 6:00
        if time >= 6 and time < 23:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –¥–Ω—è
            if date_ not in daily_data:
                daily_data[date_] = {'temperatures': [temperature], 'rain_probabilities': [rain_probability],
                                     'weather_icons': [weather_icon]}
            else:
                daily_data[date_]['temperatures'].append(temperature)
                daily_data[date_]['rain_probabilities'].append(rain_probability)
                daily_data[date_]['weather_icons'].append(weather_icon)

    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω—é—é —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è –∏ –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    for date, data in daily_data.items():
        max_temp = max(data['temperatures'])
        min_temp = min(data['temperatures'])
        # average_temp = sum(data['temperatures']) / len(data['temperatures'])
        max_rain_prob = max(data['rain_probabilities'])
        # –í—ã–≤–æ–¥–∏–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–∂–¥—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∞ –±–æ–ª—å—à–µ 0%
        if max_rain_prob > 0:
            header += f"{weekday_names[date.weekday()]}: *{min_temp:.0f}¬∞-{max_temp:.0f}¬∞* ({max_rain_prob * 100:.0f}%) {weather_icons[max(data['weather_icons'], key=data['weather_icons'].count)]}\n"
        else:
            header += f"{weekday_names[date.weekday()]}: *{min_temp:.0f}¬∞-{max_temp:.0f}¬∞* {weather_icons[max(data['weather_icons'], key=data['weather_icons'].count)]}\n"
    return header